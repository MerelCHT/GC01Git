package pieces;

import pieces.AbstractPiece;

import java.util.Scanner;

	public class Chess {

		/**
		 * @param args
		 */
		
		/**Make a constant to set the dimensions of the chess board, instead of using "magic" numbers.*/ 
		public static final int DIMENSIONS = 8;
		
		/**Make an array to set the score of both players. The first int indicates the score of white, and the second of black. */ 
		public static int[] score = {0,0};
		
		/**Creates a chessboard matrix of size 8 x 8, and indicates which piece should be in which spot. */ 
		public static void main(String[] args) {
			Scanner chessmove = new Scanner(System.in);
			AbstractPiece[][] chessboard = new AbstractPiece [DIMENSIONS] [DIMENSIONS];
			
			for(int i = 0; i < chessboard.length ; i++)
			{
				for(int j = 0; j < chessboard[i].length; j++)
				{
					if(i == 1)
					{
						chessboard[i][j] = new Pawn(false);
					}

					else if(i == 0 && (j == 0 || j == 7))
					{
						chessboard[i][j] = new Rook(false);
					}

					else if(i == 0 && (j == 1 || j == 6))
					{
						chessboard[i][j] = new Knight(false);
					}

					else if(i == 0 && (j == 2 || j == 5))
					{
						chessboard[i][j] = new Bishop(false);
					}

					else if(i == 0 && j == 3)
					{
						chessboard[i][j] = new Queen(false);
					}

					else if(i == 0 && j == 4)
					{
						chessboard[i][j] = new King(false);
					}

					else if(i == 6)
					{
						chessboard[i][j] = new Pawn(true);
					}

					else if(i == 7 && (j == 0 || j == 7))
					{
						chessboard[i][j] = new Rook(true);
					}

					else if(i == 7 && (j == 1 || j == 6))
					{
						chessboard[i][j] = new Knight(true);
					}

					else if(i == 7 && (j == 2 || j == 5))
					{
						chessboard[i][j] = new Bishop(true);
					}

					else if(i == 7 && j == 3)
					{
						chessboard[i][j] = new Queen(true);
					}

					else if(i == 7 && j == 4)
					{
						chessboard[i][j] = new King(true);
					}

					else
					{
						chessboard[i][j] = null;
					}

				}
			}
			
			/**Checks whether the user wants to perform a next move or wants to exit.*/ 
			Boolean exit = false;
			int counter = 0;
			while(!exit)
			{
				printBoard(chessboard);
				
				/**Keeps track of whose turn it is. White starts.*/ 
				if(counter % 2 == 0)
				{
					System.out.println("It's white's turn.");
				}
				else
				{	
					System.out.println("It's black's turn.");
				}
				counter++;
				
				System.out.println("What is your next move?");
				String move = chessmove.nextLine();
				if(move.equals("exit"))
				{
					System.exit(0);
				}
				else if(move.length() != 8) /**The 8 indicates the exact length that the input should be.*/
				{
					System.err.println("That's invalid input.");
				}
				else
				{
					move(chessboard, move);
				}
			}
		}
		
		/**This method takes the chessboard as an input and prints it to the console.*/
		public static void printBoard(AbstractPiece[][] chessboard){
			System.out.println("\t a \t b \t c \t d \t e \t f \t g \t h");
			for(int i = 0; i< chessboard.length ; i++)
			{
				System.out.print(i + 1 + "." + "\t");

				for(int j = 0; j < chessboard.length ; j++)
				{
					if(chessboard[i][j]!=null){
						chessboard[i][j].draw();
					}
					else{
						System.out.print("\t");
					}

					}
				
					System.out.print("\n");
				}

			}
			

		/**This method takes a chessboard and a move as input and performs the move on the board.*/
		public static void move(AbstractPiece[][] chessboard, String move)
		{	

			/**parse move string into components*/
			String[] components = move.split(" ");
			
			/**if you assume that the move is "e1 to e5" then
			 * components[0].charAt(0) = 'e'
			 * components[0].charAt(1) == '1'
			 */
			
			
			int oldPosY;
			int oldPosX = Character.getNumericValue(components[0].charAt(1) - 1);
			int newPosY;
			int newPosX = Character.getNumericValue(components[2].charAt(1) - 1); 
			
			
			if (components[0].charAt(0) == 'a')
			{
				oldPosY = 0;
			}
			
			else if(components[0].charAt(0) == 'b')
			{
				oldPosY = 1;
			}
			
			else if(components[0].charAt(0) == 'c')
			{
				oldPosY = 2;
			}
			
			else if(components[0].charAt(0) == 'd')
			{
				oldPosY = 3;
			}
			
			else if(components[0].charAt(0) == 'e')
			{
				oldPosY = 4;
			}
			
			else if(components[0].charAt(0) == 'f')
			{
				oldPosY = 5;
			}
			
			else if(components[0].charAt(0) == 'g')
			{
				oldPosY = 6;
			}
			
			else 
			{
				oldPosY = 7;
			}
			
			/**Set the new position of Y.*/ 
			if (components[2].charAt(0) == 'a')
			{
				newPosY = 0;
			}
			
			else if(components[2].charAt(0) == 'b')
			{
				newPosY = 1;
			}
			
			else if(components[2].charAt(0) == 'c')
			{
				newPosY = 2;
			}
			
			else if(components[2].charAt(0) == 'd')
			{
				newPosY = 3;
			}
			
			else if(components[2].charAt(0) == 'e')
			{
				newPosY = 4;
			}
			
			else if(components[2].charAt(0) == 'f')
			{
				newPosY = 5;
			}
			
			else if(components[2].charAt(0) == 'g')
			{
				newPosY = 6;
			}
			
			else 
			{
				newPosY = 7;
			}
			
			
			/**Make the move: replace the original position with an empty space
			*and place the piece you're moving into the new position.
			*/ 
			if ((Character.getNumericValue(components[0].charAt(1))  > 8) || (Character.getNumericValue(components[2].charAt(1)) > 8))
			{
				System.err.println("That's invalid input.");
			}
			
			else if(checkMove(chessboard, oldPosX, oldPosY, newPosX, newPosY))
			{
				score(chessboard, oldPosX, oldPosY, newPosX, newPosY);
				chessboard[newPosX][newPosY] = chessboard[oldPosX][oldPosY];
				chessboard[oldPosX][oldPosY] = null;
				
			}
			else
			{
				System.err.println("That is an invalid move.");
			}
			
		}
		
		
		/**This method checks whether the player's move is valid or not.*/
		public static boolean checkMove(AbstractPiece[][] chessboard, int oldPosX, int oldPosY, int newPosX, int newPosY)
		{
			boolean validMove = false;
			/**This checks whether the place you're going to is empty and whether the piece you're moving isn't an empty spot.*/ 
			if(chessboard[newPosX][newPosY] == null && (chessboard[oldPosX][oldPosY]!=null)){
				   validMove = chessboard[oldPosX][oldPosY].isMoveValid(oldPosX, oldPosY, newPosX, newPosY);
				 }
			//This checks whether you're not moving an empty spot, and if you move a black piece it makes sure you can only move it to 
			//a place where there's a white piece. 
			else if((chessboard[oldPosX][oldPosY]!=null) && (!chessboard[oldPosX][oldPosY].isWhite() && chessboard[newPosX][newPosY].isWhite())){
					validMove = chessboard[oldPosX][oldPosY].isMoveValid(oldPosX, oldPosY, newPosX, newPosY);
				}
			//This checks whether you're not moving an empty spot, and if you move a white piece it makes sure you can only move it to 
			//a place where there's a black piece. 
			else if ((chessboard[oldPosX][oldPosY]!=null) &&(chessboard[oldPosX][oldPosY].isWhite() &&!chessboard[newPosX][newPosY].isWhite())){
					validMove = false;
				}
			//If you're trying to move an empty spot or put a black piece on the spot of a black piece or a white piece
			// on the spot of a white piece, it will tell you your move is invalid. 
			else{
				validMove = false;
			}
			return validMove;
		}
		
		
		//This keeps track of the players score. 
		public static int[] score(AbstractPiece[][] chessboard, int oldPosX, int oldPosY, int newPosX, int newPosY){
		
			if(chessboard[newPosX][newPosY] == null && (chessboard[oldPosX][oldPosY]!=null)){
				score[0] = 0;
				score[1] = 0;
			}
			else if((chessboard[oldPosX][oldPosY]!=null) && (!chessboard[oldPosX][oldPosY].isWhite() && chessboard[newPosX][newPosY].isWhite())){
				score[0] = score[0] + chessboard[newPosX][newPosY].relativeValue();
				System.out.println("Score white: " + score[1]);
				System.out.println("Score black: " + score[0]);
			}
			else if((chessboard[oldPosX][oldPosY]!=null) && (chessboard[oldPosX][oldPosY].isWhite() && !chessboard[newPosX][newPosY].isWhite())){
				score[1] = score[1] + chessboard[newPosX][newPosY].relativeValue();
				System.out.println("Score white: " + score[1]);
				System.out.println("Score black: " + score[0]);
			}
			else{
				System.out.println("Invalid move");
			}
			return score;
			
		}
		
		
}


